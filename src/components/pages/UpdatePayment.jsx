import React, { useState } from "react";
import axios from "axios";
import { jsPDF } from "jspdf";

const UpdatePayment = () => {
  const [formData, setFormData] = useState({
    cnic: "",
    amount: "",
    method: "",
    roomNumber: "",
    month: "",
    year: "",
  });

  const [message, setMessage] = useState(null);
  const [error, setError] = useState(null);
  const [paymentData, setPaymentData] = useState(null); // Store data to regenerate receipt

  const paymentMethods = ["cash", "card", "online"];
  const backendURL = import.meta.env.VITE_BACKEND_URL;

  const handleChange = (e) => {
    setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
  };

  const generatePDF = (payment, isDuplicate = false) => {
    const doc = new jsPDF();
    const margin = 15;
    const pageWidth = 210;
    let y = 20;

    doc.setDrawColor(0);
    doc.setLineWidth(0.5);
    doc.rect(margin, y, pageWidth - margin * 2, 230);

    doc.setFontSize(16);
    doc.setFont("helvetica", "bold");
    doc.text("Sabir Heights Management", pageWidth / 2, y + 10, {
      align: "center",
    });
    doc.setFontSize(14);
    doc.text("Hostel Payment Receipt", pageWidth / 2, y + 20, {
      align: "center",
    });

    if (isDuplicate) {
      doc.setTextColor(255, 0, 0);
      doc.setFontSize(12);
      doc.text("Duplicate Copy", pageWidth - margin - 50, y + 12);
      doc.setTextColor(0);
    }

    y += 35;
    doc.setLineWidth(0.2);
    doc.line(margin, y, pageWidth - margin, y);

    y += 10;
    doc.setFontSize(12);
    doc.setFont("helvetica", "bold");
    doc.text("Student Information", margin + 2, y);

    y += 5;
    doc.setLineWidth(0.1);
    doc.rect(margin + 2, y, pageWidth - margin * 2 - 4, 40);

    doc.setFont("helvetica", "normal");
    y += 12;
    doc.text(`Name: ${payment.student?.username || "N/A"}`, margin + 6, y);
    y += 8;
    doc.text(`Email: ${payment.student?.email || "N/A"}`, margin + 6, y);
    y += 8;
    doc.text(`CNIC: ${payment.student?.cnic || "N/A"}`, margin + 6, y);
    y += 8;
    doc.text(`Room No: ${formData.roomNumber}`, margin + 6, y);

    y += 20;
    doc.setFont("helvetica", "bold");
    doc.text("Payment Details", margin + 2, y);

    y += 5;
    doc.rect(margin + 2, y, pageWidth - margin * 2 - 4, 50);

    doc.setFont("helvetica", "normal");
    y += 12;
    doc.text(`Amount Paid: Rs ${formData.amount}`, margin + 6, y);
    y += 8;
    doc.text(`Method: ${formData.method}`, margin + 6, y);
    y += 8;
    doc.text(`Month: ${formData.month}`, margin + 6, y);
    y += 8;
    doc.text(`Year: ${formData.year}`, margin + 6, y);
    y += 8;
    doc.text(`Status: Paid`, margin + 6, y);

    y += 20;
    doc.setFontSize(10);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, margin + 2, y);

    y += 10;
    doc.line(margin, y, pageWidth - margin, y);
    y += 8;
    doc.setTextColor(100);
    doc.text("Thank you for your payment!", margin + 2, y);
    y += 6;
    doc.text("Generated by muzicode.dev", margin + 2, y);

    doc.save(
      `${isDuplicate ? "duplicate-" : ""}payment-slip-${formData.cnic}-${
        formData.month
      }-${formData.year}.pdf`
    );
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage(null);
    setError(null);

    try {
      const res = await axios.post(
        `${backendURL}/api/v1/payment/updatePayment`,
        formData,
        {
          withCredentials: true, // Include session credentials
        }
      );
      setMessage(res.data.message);
      setPaymentData(res.data.data); // Save for later PDF regen
      generatePDF(res.data.data);
    } catch (err) {
      setError(err.response?.data?.message || "Something went wrong!");
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-r from-indigo-100 via-purple-100 to-pink-100 flex items-center justify-center p-6">
      <div className="bg-white rounded-3xl shadow-xl max-w-md w-full p-8">
        <h1 className="text-3xl font-extrabold text-center text-indigo-700 mb-8">
          Update Payment
        </h1>

        {message && (
          <div className="mb-4 bg-green-100 border border-green-400 text-green-700 px-4 py-2 rounded">
            {message}
          </div>
        )}

        {error && (
          <div className="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-2 rounded">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-6">
          <input
            type="text"
            name="cnic"
            placeholder="CNIC"
            value={formData.cnic}
            onChange={handleChange}
            required
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400"
          />
          <input
            type="number"
            name="amount"
            placeholder="Amount"
            value={formData.amount}
            onChange={handleChange}
            required
            min="0"
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400"
          />
          <select
            name="method"
            value={formData.method}
            onChange={handleChange}
            required
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400"
          >
            <option value="">Select Payment Method</option>
            {paymentMethods.map((method) => (
              <option key={method} value={method}>
                {method.charAt(0).toUpperCase() + method.slice(1)}
              </option>
            ))}
          </select>
          <input
            type="text"
            name="roomNumber"
            placeholder="Room Number"
            value={formData.roomNumber}
            onChange={handleChange}
            required
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400"
          />
          <input
            type="text"
            name="month"
            placeholder="Month (e.g., January)"
            value={formData.month}
            onChange={handleChange}
            required
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400"
          />
          <input
            type="number"
            name="year"
            placeholder="Year (e.g., 2025)"
            value={formData.year}
            onChange={handleChange}
            required
            min="2000"
            max="2100"
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400"
          />
          <button
            type="submit"
            className="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 rounded-lg transition"
          >
            Submit & Generate PDF
          </button>
        </form>

        {/* Show regenerate receipt button if payment data exists */}
        {paymentData && (
          <button
            onClick={() => generatePDF(paymentData, true)}
            className="mt-6 w-full bg-yellow-500 hover:bg-yellow-600 text-white font-semibold py-3 rounded-lg transition"
          >
            Download Receipt Again
          </button>
        )}
      </div>
    </div>
  );
};

export default UpdatePayment;
